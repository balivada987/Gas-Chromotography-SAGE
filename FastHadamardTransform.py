# -*- coding: utf-8 -*-
"""
Created on Fri Jun 10 12:35:10 2016



The source for this entire procedure is Hadamard Transform Optics, by Harwit
and Sloane.
"""

import matplotlib
import numpy as np
from scipy.linalg import hadamard
from time import clock


class FastHadamardTransform():
    def __init__(
            self):
        def create_simplex_matrix(barcode):
            """
            This function creates a simplex matrix which is used to deconvolve the
            raw data output by the GC. The first row of this matrix corresponds to the
            injection sequence, and successive rows are generated by shifting the
            previous row one space to the left.

            :param barcode: The first row of the matrix, and the injection sequence
            generated by a shift register. Can be generated from function
            generate_sample_barcode in MultiPlex GC Simulation.py. Should be
            composed of only ones and zeros.
            :return: The simplex matrix used to generate the overview chromatogram.
            This matrix is composed only of ones and zeros. The first row of this
            matrix is the injection sequence/barcode.
            """

            if set(barcode) not in ({0, 1}, {0}, {1}):
                return None
            simplex = np.zeros((len(barcode), len(barcode)))
            simplex[0] = barcode
            for row in range(1, (len(barcode))):
                for item in range(0, (len(barcode) - 1)):
                    simplex[row, item] = simplex[(row - 1), (item + 1)]
                simplex[row, -1] = simplex[(row - 1), 0]
            # print simplex, "<-- simplex \n"
            return simplex

        def pi_one(simplex):
            """
            This function generates pi_1, the first permutation matrix used in the
            Fast Hadamard Transform.

            :param simplex: The simplex matrix of size n x n, which can be generated
            by the function create_simplex_matrix. The first row of this matrix is
            the injection sequence/barcode.
            :return: pi_1, the first permutation matrix used in the Fast Hadamard
            Transform. Should be a column vector with values ranging from 1 to n.
            """
            n = len(simplex[0])
            m = int(np.log2(n + 1))
            mxn = np.zeros((m, n))
            for i in range(m):
                mxn[i] = simplex[:, i]
            pi_1 = [0] * n
            for i in range(n):
                col = mxn[:, i]
                string = ""
                for j in col:
                    string = string + str(int(j))
                pi_1[i] = int(string, 2)
            # print pi_1, "<-- pi_1 \n"
            return pi_1

        def pi_two(simplex, pi1):
            """
            This function generates pi_2, the second permutation matrix used in the
            Fast Hadamard Transform.

            :param simplex: The simplex matrix of size n x n, which can be generated
            by the function create_simplex_matrix. The first row of this matrix is
            the injection sequence/barcode. This is the same simplex matrix used in
            the function pi_one to find pi_1, the first permutation matrix.
            :param pi1: The first permutation matrix used in the Fast Hadamard
            Transform. This matrix can be found using the function pi_one.
            :return: pi_2, the second permutation matrix used in the Fast Hadamard
            Transform. Should be a column vector with values ranging from 0 to n-1.

            """
            n = len(simplex[0])
            m = int(np.log2(n + 1))
            H = hadamard((n + 1))
            left_array = np.zeros((n, m))
            right_array = np.zeros((n, m))
            H_new = np.delete(H, (0), axis=0)
            H_new = np.delete(H_new, (0), axis=1)
            for i in np.nditer(H_new, op_flags=['readwrite']):
                if i == 1:
                    i[...] = 0
                else:
                    i[...] = 1
            for i in range(m):
                left_array[:, i] = H_new[:, (pi1[i] - 1)]
                right_array[:, i] = simplex[i, :]
            pi_2 = [0] * n
            for i in range(n):
                for j in range(n):
                    if all(left_array[i] == right_array[j]):
                        pi_2[i] = j
            # print pi_2, "<-- pi_2 \n"
            return pi_2

        def theta(pi1, pi2, data):
            """
            This function generates theta, a matrix used in the Fast Hadamard
            Transform. This matrix is later multiplied by a scalar to obtain the
            overview chromatogram.

            :param pi1: The first permutation matrix used in the Fast Hadamard
            Transform. Should be a column vector of length n, with values ranging from
            1 to n. Can be generated using the function pi_one.
            :param pi2: The second permutation matrix used in the Fast Hadamard
            Transform. Should be a column vector of length n, with values ranging from
            0 to n-1. Can be generated using the function pi_two.
            :param data: The raw data or measurements output by the GC, after being
            divided into the appropriate time bins. Should be a column vector of
            length n.
            :return: The matrix theta, which is used directly in the Fast Hadamard
            Transform. Should be a column vector of length n.
            """
            n = len(pi1)
            W = np.zeros((n, 1))
            for i in range(n):
                W[pi1[i] - 1] = data[i]
            X = np.zeros((n + 1, 1))
            for i in range(n):
                X[i + 1] = W[i]
            H = hadamard((n + 1))
            Y = np.dot(H, X)
            Y = np.delete(Y, (0), axis=0)
            theta = np.zeros((n, 1))
            for i in range(n):
                theta[pi2[i]] = Y[i]
            theta = theta * -1
            # print theta, "<-- theta \n"
            return theta

        def FHT(theta):
            """
            This function carries out the Fast Hadamard Transform. This converts the
            raw data (input to the function theta) into an overview chromatogram.

            :param theta: A matrix used in the Fast Hadamard Transform which can be
            generated using the function theta. Should be a column vector of length n.
            :return: The overview chromatogram. Should be a column vector of length n.
            """
            n = float(len(theta))
            overview = theta * (2 / (n + 1))
            # print overview, "<-- overview \n"
            return overview

        if __name__ == "__main__":
            start_time = clock()
            initial = [1, 1, 1, 0, 1, 0, 0]
            print(initial), "<-- Injection sequence \n"
            simplex = create_simplex_matrix(initial)
            pi1 = pi_one(simplex)
            pi2 = pi_two(simplex, pi1)
            data = [11, 22, 33, 44, 55, 66, 77]
            print(data), "<-- Raw data \n"
            theta = theta(pi1, pi2, data)
            overview = FHT(theta)
            print(simplex), "<-- Simplex matrix \n"
            print(pi1), "<-- 1st permutation matrix \n"
            print(pi2), "<-- 2nd permutation matrix \n"
            print(theta), "<-- Theta matrix \n"
            print(overview), "<-- Overview matrix"
            #  print "----%s seconds----" % (clock() - start_time)

